import asyncio
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏
playlists = {}  # {playlist_name: [file_id, file_id]}
current_playlist = {}  # {user_id: "playlist_name" –∏–ª–∏ "WAITING_NAME"}
last_messages = {}  # {user_id: [message_id, message_id...]}


def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé∂ –ù–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç", callback_data="create")],
        [InlineKeyboardButton(text="üìÇ –°–ø–∏—Å–æ–∫", callback_data="list")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")]
    ])


@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç üëã –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤.\n"
                         "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())


# ---------- –°–û–ó–î–ê–ù–ò–ï –ü–õ–ï–ô–õ–ò–°–¢–ê ----------
@dp.callback_query(F.data == "create")
async def create_playlist(callback: types.CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞:")
    await callback.answer()
    current_playlist[callback.from_user.id] = "WAITING_NAME"


# ---------- –ü–û–õ–£–ß–ï–ù–ò–ï –ù–ê–ó–í–ê–ù–ò–Ø ----------
@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id

    # –∂–¥—ë–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞
    if current_playlist.get(user_id) == "WAITING_NAME":
        pl_name = message.text.strip()
        if pl_name in playlists:
            await message.answer("–¢–∞–∫–æ–π –ø–ª–µ–π–ª–∏—Å—Ç —É–∂–µ –µ—Å—Ç—å ‚ùå")
        else:
            playlists[pl_name] = []
            current_playlist[user_id] = pl_name
            await message.answer(f"‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç '{pl_name}' —Å–æ–∑–¥–∞–Ω!\n–ö–∏–¥–∞–π –º—É–∑—ã–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
        return

    # –¥–æ–±–∞–≤–ª—è–µ–º –º—É–∑—ã–∫—É
    if message.audio or message.document:
        pl_name = current_playlist.get(user_id)
        if not pl_name or pl_name == "WAITING_NAME":
            await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –ø–ª–µ–π–ª–∏—Å—Ç!")
            return
        file_id = message.audio.file_id if message.audio else message.document.file_id
        playlists[pl_name].append(file_id)
        await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ '{pl_name}' ‚úÖ")
        return

    await message.answer("–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã, –º—É–∑—ã–∫—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ üòâ")


# ---------- –°–ü–ò–°–û–ö –ü–õ–ï–ô–õ–ò–°–¢–û–í ----------
@dp.callback_query(F.data == "list")
async def list_playlists(callback: types.CallbackQuery):
    if not playlists:
        await callback.message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ üò¢")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=pl, callback_data=f"open:{pl}")]
                         for pl in playlists.keys()]
    )
    await callback.message.answer("üìÇ –¢–≤–æ–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã:", reply_markup=kb)
    await callback.answer()


# ---------- –û–¢–ö–†–´–¢–ò–ï –ü–õ–ï–ô–õ–ò–°–¢–ê ----------
@dp.callback_query(F.data.startswith("open:"))
async def open_playlist(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    pl_name = callback.data.split(":")[1]

    # —É–¥–∞–ª—è–µ–º –ø—Ä–æ—à–ª—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º—É–∑—ã–∫–æ–π
    if user_id in last_messages:
        for msg_id in last_messages[user_id]:
            try:
                await bot.delete_message(user_id, msg_id)
            except:
                pass
        last_messages[user_id] = []

    current_playlist[user_id] = pl_name
    sent_ids = []

    if not playlists[pl_name]:
        msg = await callback.message.answer(f"–ü–ª–µ–π–ª–∏—Å—Ç '{pl_name}' –ø—É—Å—Ç üï≥Ô∏è")
        sent_ids.append(msg.message_id)
    else:
        msg = await callback.message.answer(f"üéµ –ü–µ—Å–Ω–∏ –∏–∑ '{pl_name}':")
        sent_ids.append(msg.message_id)
        for file_id in playlists[pl_name]:
            audio_msg = await bot.send_audio(user_id, file_id)
            sent_ids.append(audio_msg.message_id)

    last_messages[user_id] = sent_ids
    await callback.answer()


# ---------- –ù–ê–°–¢–†–û–ô–ö–ò ----------
@dp.callback_query(F.data == "settings")
async def settings_menu(callback: types.CallbackQuery):
    if not playlists:
        await callback.message.answer("–ù–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üò¢")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=pl, callback_data=f"settings:{pl}")]
                         for pl in playlists.keys()]
    )
    await callback.message.answer("‚öôÔ∏è –í—ã–±–µ—Ä–∏ –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:", reply_markup=kb)
    await callback.answer()


@dp.callback_query(F.data.startswith("settings:"))
async def playlist_settings(callback: types.CallbackQuery):
    pl_name = callback.data.split(":")[1]

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç", callback_data=f"delete:{pl_name}")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å", callback_data=f"rename:{pl_name}")],
        [InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫", callback_data=f"remove_track:{pl_name}")]
    ])
    await callback.message.answer(f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞ '{pl_name}':", reply_markup=kb)
    await callback.answer()


# ---------- –£–î–ê–õ–ï–ù–ò–ï –ü–õ–ï–ô–õ–ò–°–¢–ê ----------
@dp.callback_query(F.data.startswith("delete:"))
async def delete_playlist(callback: types.CallbackQuery):
    pl_name = callback.data.split(":")[1]
    playlists.pop(pl_name, None)
    await callback.message.answer(f"üóë –ü–ª–µ–π–ª–∏—Å—Ç '{pl_name}' —É–¥–∞–ª—ë–Ω!")
    await callback.answer()


# ---------- –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–ï ----------
@dp.callback_query(F.data.startswith("rename:"))
async def rename_playlist(callback: types.CallbackQuery):
    pl_name = callback.data.split(":")[1]
    current_playlist[callback.from_user.id] = f"RENAME:{pl_name}"
    await callback.message.answer(f"–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è –ø–ª–µ–π–ª–∏—Å—Ç–∞ '{pl_name}':")
    await callback.answer()


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
@dp.message()
async def handle_text(message: types.Message):
    user_id = message.from_user.id
    state = current_playlist.get(user_id)

    if state and state.startswith("RENAME:"):
        old_name = state.split(":")[1]
        new_name = message.text.strip()
        if new_name in playlists:
            await message.answer("–¢–∞–∫–æ–π –ø–ª–µ–π–ª–∏—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚ùå")
        else:
            playlists[new_name] = playlists.pop(old_name)
            current_playlist[user_id] = new_name
            await message.answer(f"‚úèÔ∏è –ü–ª–µ–π–ª–∏—Å—Ç '{old_name}' –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ '{new_name}' ‚úÖ")
        return


# ---------- –£–î–ê–õ–ï–ù–ò–ï –¢–†–ï–ö–ê ----------
@dp.callback_query(F.data.startswith("remove_track:"))
async def remove_track(callback: types.CallbackQuery):
    pl_name = callback.data.split(":")[1]
    if not playlists[pl_name]:
        await callback.message.answer("–ü–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç üï≥Ô∏è")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"–¢—Ä–µ–∫ {i+1}", callback_data=f"rm:{pl_name}:{i}")]
            for i in range(len(playlists[pl_name]))
        ]
    )
    await callback.message.answer("–í—ã–±–µ—Ä–∏ —Ç—Ä–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    await callback.answer()


@dp.callback_query(F.data.startswith("rm:"))
async def rm_track(callback: types.CallbackQuery):
    _, pl_name, idx = callback.data.split(":")
    idx = int(idx)
    if 0 <= idx < len(playlists[pl_name]):
        playlists[pl_name].pop(idx)
        await callback.message.answer(f"‚ûñ –¢—Ä–µ–∫ {idx+1} —É–¥–∞–ª—ë–Ω –∏–∑ '{pl_name}' ‚úÖ")
    else:
        await callback.message.answer("–û—à–∏–±–∫–∞: —Ç—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚ùå")
    await callback.answer()


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())