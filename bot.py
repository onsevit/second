import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏
playlists = {}  # {playlist_name: [file_id, file_id]}
current_playlist = {}  # {user_id: "playlist_name" –∏–ª–∏ "WAITING_NAME"}


@dp.message(Command("start"))
async def start(message: types.Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç", callback_data="create")],
        [InlineKeyboardButton(text="–ú–æ–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã", callback_data="list")]
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç üëã –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤.\n"
                         "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)


@dp.callback_query(lambda c: c.data == "create")
async def create_playlist(callback: types.CallbackQuery):
    await callback.message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞:")
    await callback.answer()
    current_playlist[callback.from_user.id] = "WAITING_NAME"


@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id

    # –∂–¥—ë–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞
    if current_playlist.get(user_id) == "WAITING_NAME":
        pl_name = message.text.strip()
        if pl_name in playlists:
            await message.answer("–¢–∞–∫–æ–π –ø–ª–µ–π–ª–∏—Å—Ç —É–∂–µ –µ—Å—Ç—å ‚ùå")
        else:
            playlists[pl_name] = []
            current_playlist[user_id] = pl_name
            await message.answer(f"‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç '{pl_name}' —Å–æ–∑–¥–∞–Ω!\n–ö–∏–¥–∞–π –º—É–∑—ã–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
        return

    # –¥–æ–±–∞–≤–ª—è–µ–º –º—É–∑—ã–∫—É
    if message.audio or message.document:
        pl_name = current_playlist.get(user_id)
        if not pl_name:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –ø–ª–µ–π–ª–∏—Å—Ç!")
            return
        file_id = message.audio.file_id if message.audio else message.document.file_id
        playlists[pl_name].append(file_id)
        await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ '{pl_name}' ‚úÖ")
        return

    await message.answer("–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã, –º—É–∑—ã–∫—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ üòâ")


@dp.callback_query(lambda c: c.data == "list")
async def list_playlists(callback: types.CallbackQuery):
    if not playlists:
        await callback.message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ üò¢")
        return

    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=pl, callback_data=f"open:{pl}")]
                         for pl in playlists.keys()]
    )
    await callback.message.answer("–¢–≤–æ–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã:", reply_markup=kb)
    await callback.answer()


@dp.callback_query(lambda c: c.data.startswith("open:"))
async def open_playlist(callback: types.CallbackQuery):
    pl_name = callback.data.split(":")[1]
    current_playlist[callback.from_user.id] = pl_name
    if not playlists[pl_name]:
        await callback.message.answer(f"–ü–ª–µ–π–ª–∏—Å—Ç '{pl_name}' –ø—É—Å—Ç üï≥Ô∏è")
    else:
        await callback.message.answer(f"üéµ –ü–µ—Å–Ω–∏ –∏–∑ '{pl_name}':")
        for file_id in playlists[pl_name]:
            await bot.send_audio(callback.from_user.id, file_id)
    await callback.answer()


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())