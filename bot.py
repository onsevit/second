import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ
playlists = {}  # {playlist_name: [file_id, file_id]}
current_playlist = {}  # {user_id: "playlist_name" –∏–ª–∏ "WAITING_NAME"}
last_messages = {}  # {user_id: [message_id, message_id...]}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üé∂ –ù–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç")],
        [KeyboardButton(text="üìÇ –°–ø–∏—Å–æ–∫")],
        [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ],
    resize_keyboard=True
)


@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç üëã –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_kb
    )


@dp.message(lambda m: m.text == "üé∂ –ù–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç")
async def create_playlist(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞:")
    current_playlist[message.from_user.id] = "WAITING_NAME"


@dp.message(lambda m: m.text == "üìÇ –°–ø–∏—Å–æ–∫")
async def list_playlists(message: types.Message):
    if not playlists:
        await message.answer("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ üò¢")
        return

    text = "üìÇ –¢–≤–æ–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã:\n" + "\n".join([f"‚Ä¢ {pl}" for pl in playlists.keys()])
    await message.answer(text)


@dp.message(lambda m: m.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: types.Message):
    if not playlists:
        await message.answer("–ù–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ üò¢")
        return

    text = "‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã:\n" + "\n".join([f"‚Ä¢ {pl}" for pl in playlists.keys()])
    await message.answer(text + "\n\n–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É:\n"
                         "`—É–¥–∞–ª–∏—Ç—å <–Ω–∞–∑–≤–∞–Ω–∏–µ>`\n"
                         "`–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å <—Å—Ç–∞—Ä–æ–µ> <–Ω–æ–≤–æ–µ>`\n"
                         "`—É–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫ <–ø–ª–µ–π–ª–∏—Å—Ç> <–Ω–æ–º–µ—Ä>`", parse_mode="Markdown")


@dp.message()
async def handle_message(message: types.Message):
    user_id = message.from_user.id
    text = message.text.strip()

    # –∂–¥—ë–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞
    if current_playlist.get(user_id) == "WAITING_NAME":
        pl_name = text
        if pl_name in playlists:
            await message.answer("–¢–∞–∫–æ–π –ø–ª–µ–π–ª–∏—Å—Ç —É–∂–µ –µ—Å—Ç—å ‚ùå")
        else:
            playlists[pl_name] = []
            current_playlist[user_id] = pl_name
            await message.answer(f"‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç '{pl_name}' —Å–æ–∑–¥–∞–Ω!\n–ö–∏–¥–∞–π –º—É–∑—ã–∫—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
        return

    # –¥–æ–±–∞–≤–ª—è–µ–º –º—É–∑—ã–∫—É
    if message.audio or message.document:
        pl_name = current_playlist.get(user_id)
        if not pl_name or pl_name == "WAITING_NAME":
            await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –ø–ª–µ–π–ª–∏—Å—Ç!")
            return
        file_id = message.audio.file_id if message.audio else message.document.file_id
        playlists[pl_name].append(file_id)
        await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ '{pl_name}' ‚úÖ")
        return

    # –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if text.startswith("—É–¥–∞–ª–∏—Ç—å "):
        pl_name = text.replace("—É–¥–∞–ª–∏—Ç—å ", "", 1).strip()
        if pl_name in playlists:
            playlists.pop(pl_name)
            await message.answer(f"üóë –ü–ª–µ–π–ª–∏—Å—Ç '{pl_name}' —É–¥–∞–ª—ë–Ω!")
        else:
            await message.answer("–¢–∞–∫–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–µ—Ç ‚ùå")
        return

    if text.startswith("–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å "):
        parts = text.split()
        if len(parts) >= 3:
            old_name, new_name = parts[1], parts[2]
            if old_name in playlists:
                if new_name in playlists:
                    await message.answer("–¢–∞–∫–æ–π –ø–ª–µ–π–ª–∏—Å—Ç —É–∂–µ –µ—Å—Ç—å ‚ùå")
                else:
                    playlists[new_name] = playlists.pop(old_name)
                    current_playlist[user_id] = new_name
                    await message.answer(f"‚úèÔ∏è '{old_name}' –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ '{new_name}' ‚úÖ")
            else:
                await message.answer("–¢–∞–∫–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–µ—Ç ‚ùå")
        else:
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å <—Å—Ç–∞—Ä–æ–µ> <–Ω–æ–≤–æ–µ>")
        return

    if text.startswith("—É–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫ "):
        parts = text.split()
        if len(parts) >= 3:
            pl_name, idx = parts[2], None
            try:
                idx = int(parts[3]) - 1
            except:
                pass
            if pl_name in playlists and idx is not None and 0 <= idx < len(playlists[pl_name]):
                playlists[pl_name].pop(idx)
                await message.answer(f"‚ûñ –¢—Ä–µ–∫ {idx+1} —É–¥–∞–ª—ë–Ω –∏–∑ '{pl_name}' ‚úÖ")
            else:
                await message.answer("–û—à–∏–±–∫–∞: –ø—Ä–æ–≤–µ—Ä—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ ‚ùå")
        else:
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: —É–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫ <–ø–ª–µ–π–ª–∏—Å—Ç> <–Ω–æ–º–µ—Ä>")
        return

    # –≤—ã–±–æ—Ä –ø–ª–µ–π–ª–∏—Å—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è
    if text in playlists:
        pl_name = text
        if user_id in last_messages:
            for msg_id in last_messages[user_id]:
                try:
                    await bot.delete_message(user_id, msg_id)
                except:
                    pass
            last_messages[user_id] = []

        current_playlist[user_id] = pl_name
        sent_ids = []

        if not playlists[pl_name]:
            msg = await message.answer(f"–ü–ª–µ–π–ª–∏—Å—Ç '{pl_name}' –ø—É—Å—Ç üï≥Ô∏è")
            sent_ids.append(msg.message_id)
        else:
            msg = await message.answer(f"üéµ –ü–µ—Å–Ω–∏ –∏–∑ '{pl_name}':")
            sent_ids.append(msg.message_id)
            for file_id in playlists[pl_name]:
                audio_msg = await bot.send_audio(user_id, file_id)
                sent_ids.append(audio_msg.message_id)

        last_messages[user_id] = sent_ids
        return

    await message.answer("–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã, –º—É–∑—ã–∫—É –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ üòâ")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())